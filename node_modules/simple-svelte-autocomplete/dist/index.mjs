function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}
function get_all_dirty_from_scope($$scope) {
    if ($$scope.ctx.length > 32) {
        const dirty = [];
        const length = $$scope.ctx.length / 32;
        for (let i = 0; i < length; i++) {
            dirty[i] = -1;
        }
        return dirty;
    }
    return -1;
}
function append(target, node) {
    target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
    const append_styles_to = get_root_for_style(target);
    if (!append_styles_to.getElementById(style_sheet_id)) {
        const style = element('style');
        style.id = style_sheet_id;
        style.textContent = styles;
        append_stylesheet(append_styles_to, style);
    }
}
function get_root_for_style(node) {
    if (!node)
        return document;
    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
    if (root && root.host) {
        return root;
    }
    return node.ownerDocument;
}
function append_stylesheet(node, style) {
    append(node.head || node, style);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
    for (let i = 0; i < iterations.length; i += 1) {
        if (iterations[i])
            iterations[i].d(detaching);
    }
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
    return function (event) {
        event.preventDefault();
        // @ts-ignore
        return fn.call(this, event);
    };
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_data(text, data) {
    data = '' + data;
    if (text.wholeText !== data)
        text.data = data;
}
function set_input_value(input, value) {
    input.value = value == null ? '' : value;
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
class HtmlTag {
    constructor() {
        this.e = this.n = null;
    }
    c(html) {
        this.h(html);
    }
    m(html, target, anchor = null) {
        if (!this.e) {
            this.e = element(target.nodeName);
            this.t = target;
            this.c(html);
        }
        this.i(anchor);
    }
    h(html) {
        this.e.innerHTML = html;
        this.n = Array.from(this.e.childNodes);
    }
    i(anchor) {
        for (let i = 0; i < this.n.length; i += 1) {
            insert(this.t, this.n[i], anchor);
        }
    }
    p(html) {
        this.d();
        this.h(html);
        this.i(this.a);
    }
    d() {
        this.n.forEach(detach);
    }
}

let current_component;
function set_current_component(component) {
    current_component = component;
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
// flush() calls callbacks in this order:
// 1. All beforeUpdate callbacks, in order: parents before children
// 2. All bind:this callbacks, in reverse order: children before parents.
// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
//    for afterUpdates called during the initial onMount, which are called in
//    reverse order: children before parents.
// Since callbacks might update component values, which could trigger another
// call to flush(), the following steps guard against this:
// 1. During beforeUpdate, any updated components will be added to the
//    dirty_components array and will cause a reentrant call to flush(). Because
//    the flush index is kept outside the function, the reentrant call will pick
//    up where the earlier call left off and go through all dirty components. The
//    current_component value is saved and restored so that the reentrant call will
//    not interfere with the "parent" flush() call.
// 2. bind:this callbacks cannot trigger new flush() calls.
// 3. During afterUpdate, any updated components will NOT have their afterUpdate
//    callback called a second time; the seen_callbacks set, outside the flush()
//    function, guarantees this behavior.
const seen_callbacks = new Set();
let flushidx = 0; // Do *not* move this inside the flush() function
function flush() {
    const saved_component = current_component;
    do {
        // first, call beforeUpdate functions
        // and update components
        while (flushidx < dirty_components.length) {
            const component = dirty_components[flushidx];
            flushidx++;
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        flushidx = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    seen_callbacks.clear();
    set_current_component(saved_component);
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function mount_component(component, target, anchor, customElement) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    if (!customElement) {
        // onMount happens before the initial afterUpdate
        add_render_callback(() => {
            const new_on_destroy = on_mount.map(run).filter(is_function);
            if (on_destroy) {
                on_destroy.push(...new_on_destroy);
            }
            else {
                // Edge case - component was destroyed immediately,
                // most likely as a result of a binding initialising
                run_all(new_on_destroy);
            }
            component.$$.on_mount = [];
        });
    }
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        on_disconnect: [],
        before_update: [],
        after_update: [],
        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false,
        root: options.target || parent_component.$$.root
    };
    append_styles && append_styles($$.root);
    let ready = false;
    $$.ctx = instance
        ? instance(component, options.props || {}, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor, options.customElement);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src/SimpleAutocomplete.svelte generated by Svelte v3.47.0 */

function add_css(target) {
	append_styles(target, "svelte-1nqq7zl", ".autocomplete.svelte-1nqq7zl.svelte-1nqq7zl{min-width:200px;display:inline-block;max-width:100%;position:relative;vertical-align:top;height:2.25em}.autocomplete.svelte-1nqq7zl.svelte-1nqq7zl:not(.hide-arrow):not(.is-loading)::after{border:3px solid;border-radius:2px;border-right:0;border-top:0;content:\" \";display:block;height:0.625em;margin-top:-0.4375em;pointer-events:none;position:absolute;top:50%;-webkit-transform:rotate(-45deg);transform:rotate(-45deg);-webkit-transform-origin:center;transform-origin:center;width:0.625em;border-color:#3273dc;right:1.125em;z-index:4}.autocomplete.show-clear.svelte-1nqq7zl.svelte-1nqq7zl:not(.hide-arrow)::after{right:2.3em}.autocomplete.svelte-1nqq7zl .svelte-1nqq7zl{box-sizing:border-box}.autocomplete-input.svelte-1nqq7zl.svelte-1nqq7zl{font:inherit;width:100%;height:100%;padding:5px 11px}.autocomplete.svelte-1nqq7zl:not(.hide-arrow) .autocomplete-input.svelte-1nqq7zl{padding-right:2em}.autocomplete.show-clear.svelte-1nqq7zl:not(.hide-arrow) .autocomplete-input.svelte-1nqq7zl{padding-right:3.2em}.autocomplete.hide-arrow.show-clear.svelte-1nqq7zl .autocomplete-input.svelte-1nqq7zl{padding-right:2em}.autocomplete-list.svelte-1nqq7zl.svelte-1nqq7zl{background:#fff;position:relative;width:100%;overflow-y:auto;z-index:99;padding:10px 0;top:0px;border:1px solid #999;max-height:calc(15 * (1rem + 10px) + 15px);user-select:none}.autocomplete-list.svelte-1nqq7zl.svelte-1nqq7zl:empty{padding:0}.autocomplete-list-item.svelte-1nqq7zl.svelte-1nqq7zl{padding:5px 15px;color:#333;cursor:pointer;line-height:1}.autocomplete-list-item.confirmed.svelte-1nqq7zl.svelte-1nqq7zl{background-color:#789fed;color:#fff}.autocomplete-list-item.selected.svelte-1nqq7zl.svelte-1nqq7zl{background-color:#2e69e2;color:#fff}.autocomplete-list-item-no-results.svelte-1nqq7zl.svelte-1nqq7zl{padding:5px 15px;color:#999;line-height:1}.autocomplete-list-item-create.svelte-1nqq7zl.svelte-1nqq7zl{padding:5px 15px;line-height:1}.autocomplete-list-item-loading.svelte-1nqq7zl.svelte-1nqq7zl{padding:5px 15px;line-height:1}.autocomplete-list.hidden.svelte-1nqq7zl.svelte-1nqq7zl{display:none}.autocomplete.show-clear.svelte-1nqq7zl .autocomplete-clear-button.svelte-1nqq7zl{cursor:pointer;display:block;text-align:center;position:absolute;right:0.1em;padding:0.3em 0.6em;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);z-index:4}.autocomplete.svelte-1nqq7zl:not(.show-clear) .autocomplete-clear-button.svelte-1nqq7zl{display:none}.autocomplete.svelte-1nqq7zl select.svelte-1nqq7zl{display:none}.autocomplete.is-multiple.svelte-1nqq7zl .input-container.svelte-1nqq7zl{height:auto;box-shadow:inset 0 1px 2px rgba(10, 10, 10, 0.1);border-radius:4px;border:1px solid #b5b5b5;padding-left:0.4em;padding-right:0.4em;display:flex;flex-wrap:wrap;align-items:stretch;background-color:#fff}.autocomplete.is-multiple.svelte-1nqq7zl .tag.svelte-1nqq7zl{display:flex;margin-top:0.5em;margin-bottom:0.3em}.autocomplete.is-multiple.svelte-1nqq7zl .tag.is-delete.svelte-1nqq7zl{cursor:pointer}.autocomplete.is-multiple.svelte-1nqq7zl .tags.svelte-1nqq7zl{margin-right:0.3em;margin-bottom:0}.autocomplete.is-multiple.svelte-1nqq7zl .autocomplete-input.svelte-1nqq7zl{display:flex;width:100%;flex:1 1 50px;min-width:3em;border:none;box-shadow:none;background:none}");
}

const get_no_results_slot_changes = dirty => ({
	noResultsText: dirty[0] & /*noResultsText*/ 2048
});

const get_no_results_slot_context = ctx => ({ noResultsText: /*noResultsText*/ ctx[11] });

const get_create_slot_changes = dirty => ({
	createText: dirty[0] & /*createText*/ 16384
});

const get_create_slot_context = ctx => ({ createText: /*createText*/ ctx[14] });

const get_loading_slot_changes = dirty => ({
	loadingText: dirty[0] & /*loadingText*/ 4096
});

const get_loading_slot_context = ctx => ({ loadingText: /*loadingText*/ ctx[12] });

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[116] = list[i];
	child_ctx[118] = i;
	return child_ctx;
}

const get_item_slot_changes = dirty => ({
	item: dirty[1] & /*filteredListItems*/ 1,
	label: dirty[1] & /*filteredListItems*/ 1
});

const get_item_slot_context = ctx => ({
	item: /*listItem*/ ctx[116].item,
	label: /*listItem*/ ctx[116].highlighted
	? /*listItem*/ ctx[116].highlighted
	: /*listItem*/ ctx[116].label
});

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[119] = list[i];
	return child_ctx;
}

const get_tag_slot_changes = dirty => ({
	label: dirty[0] & /*selectedItem*/ 2,
	item: dirty[0] & /*selectedItem*/ 2
});

const get_tag_slot_context = ctx => ({
	label: /*safeLabelFunction*/ ctx[38](/*tagItem*/ ctx[119]),
	item: /*tagItem*/ ctx[119],
	unselectItem: /*unselectItem*/ ctx[45]
});

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[118] = list[i];
	return child_ctx;
}

// (1023:39) 
function create_if_block_11(ctx) {
	let each_1_anchor;
	let each_value_2 = /*selectedItem*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*valueFunction, selectedItem*/ 18 | dirty[1] & /*safeLabelFunction*/ 128) {
				each_value_2 = /*selectedItem*/ ctx[1];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (1021:4) {#if !multiple && value}
function create_if_block_10(ctx) {
	let option;
	let t;

	return {
		c() {
			option = element("option");
			t = text(/*text*/ ctx[3]);
			option.__value = /*value*/ ctx[2];
			option.value = option.__value;
			option.selected = true;
			attr(option, "class", "svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*text*/ 8) set_data(t, /*text*/ ctx[3]);

			if (dirty[0] & /*value*/ 4) {
				option.__value = /*value*/ ctx[2];
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (1024:6) {#each selectedItem as i}
function create_each_block_2(ctx) {
	let option;
	let t0_value = /*safeLabelFunction*/ ctx[38](/*i*/ ctx[118]) + "";
	let t0;
	let t1;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t0 = text(t0_value);
			t1 = space();
			option.__value = option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[118], true);
			option.value = option.__value;
			option.selected = true;
			attr(option, "class", "svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t0);
			append(option, t1);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[38](/*i*/ ctx[118]) + "")) set_data(t0, t0_value);

			if (dirty[0] & /*valueFunction, selectedItem*/ 18 && option_value_value !== (option_value_value = /*valueFunction*/ ctx[4](/*i*/ ctx[118], true))) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

// (1032:4) {#if multiple && selectedItem}
function create_if_block_9(ctx) {
	let each_1_anchor;
	let current;
	let each_value_1 = /*selectedItem*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*selectedItem*/ 2 | dirty[1] & /*unselectItem, safeLabelFunction*/ 16512 | dirty[2] & /*$$scope*/ 1048576) {
				each_value_1 = /*selectedItem*/ ctx[1];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (1034:90)            
function fallback_block_4(ctx) {
	let div;
	let span0;
	let t0_value = /*safeLabelFunction*/ ctx[38](/*tagItem*/ ctx[119]) + "";
	let t0;
	let t1;
	let span1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			span1 = element("span");
			t2 = space();
			attr(span0, "class", "tag svelte-1nqq7zl");
			attr(span1, "class", "tag is-delete svelte-1nqq7zl");
			attr(div, "class", "tags has-addons svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span0);
			append(span0, t0);
			append(div, t1);
			append(div, span1);
			insert(target, t2, anchor);

			if (!mounted) {
				dispose = listen(span1, "click", prevent_default(function () {
					if (is_function(/*unselectItem*/ ctx[45](/*tagItem*/ ctx[119]))) /*unselectItem*/ ctx[45](/*tagItem*/ ctx[119]).apply(this, arguments);
				}));

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*selectedItem*/ 2 && t0_value !== (t0_value = /*safeLabelFunction*/ ctx[38](/*tagItem*/ ctx[119]) + "")) set_data(t0, t0_value);
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t2);
			mounted = false;
			dispose();
		}
	};
}

// (1033:6) {#each selectedItem as tagItem}
function create_each_block_1(ctx) {
	let current;
	const tag_slot_template = /*#slots*/ ctx[83].tag;
	const tag_slot = create_slot(tag_slot_template, ctx, /*$$scope*/ ctx[82], get_tag_slot_context);
	const tag_slot_or_fallback = tag_slot || fallback_block_4(ctx);

	return {
		c() {
			if (tag_slot_or_fallback) tag_slot_or_fallback.c();
		},
		m(target, anchor) {
			if (tag_slot_or_fallback) {
				tag_slot_or_fallback.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (tag_slot) {
				if (tag_slot.p && (!current || dirty[0] & /*selectedItem*/ 2 | dirty[2] & /*$$scope*/ 1048576)) {
					update_slot_base(
						tag_slot,
						tag_slot_template,
						ctx,
						/*$$scope*/ ctx[82],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[82])
						: get_slot_changes(tag_slot_template, /*$$scope*/ ctx[82], dirty, get_tag_slot_changes),
						get_tag_slot_context
					);
				}
			} else {
				if (tag_slot_or_fallback && tag_slot_or_fallback.p && (!current || dirty[0] & /*selectedItem*/ 2)) {
					tag_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(tag_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(tag_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (tag_slot_or_fallback) tag_slot_or_fallback.d(detaching);
		}
	};
}

// (1065:4) {#if clearable}
function create_if_block_8(ctx) {
	let span;
	let mounted;
	let dispose;

	return {
		c() {
			span = element("span");
			span.textContent = "✖";
			attr(span, "class", "autocomplete-clear-button svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			if (!mounted) {
				dispose = listen(span, "click", /*clear*/ ctx[49]);
				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(span);
			mounted = false;
			dispose();
		}
	};
}

// (1116:28) 
function create_if_block_7(ctx) {
	let div;
	let current;
	const no_results_slot_template = /*#slots*/ ctx[83]["no-results"];
	const no_results_slot = create_slot(no_results_slot_template, ctx, /*$$scope*/ ctx[82], get_no_results_slot_context);
	const no_results_slot_or_fallback = no_results_slot || fallback_block_3(ctx);

	return {
		c() {
			div = element("div");
			if (no_results_slot_or_fallback) no_results_slot_or_fallback.c();
			attr(div, "class", "autocomplete-list-item-no-results svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (no_results_slot_or_fallback) {
				no_results_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (no_results_slot) {
				if (no_results_slot.p && (!current || dirty[0] & /*noResultsText*/ 2048 | dirty[2] & /*$$scope*/ 1048576)) {
					update_slot_base(
						no_results_slot,
						no_results_slot_template,
						ctx,
						/*$$scope*/ ctx[82],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[82])
						: get_slot_changes(no_results_slot_template, /*$$scope*/ ctx[82], dirty, get_no_results_slot_changes),
						get_no_results_slot_context
					);
				}
			} else {
				if (no_results_slot_or_fallback && no_results_slot_or_fallback.p && (!current || dirty[0] & /*noResultsText*/ 2048)) {
					no_results_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(no_results_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(no_results_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (no_results_slot_or_fallback) no_results_slot_or_fallback.d(detaching);
		}
	};
}

// (1112:21) 
function create_if_block_6(ctx) {
	let div;
	let current;
	let mounted;
	let dispose;
	const create_slot_template = /*#slots*/ ctx[83].create;
	const create_slot_1 = create_slot(create_slot_template, ctx, /*$$scope*/ ctx[82], get_create_slot_context);
	const create_slot_or_fallback = create_slot_1 || fallback_block_2(ctx);

	return {
		c() {
			div = element("div");
			if (create_slot_or_fallback) create_slot_or_fallback.c();
			attr(div, "class", "autocomplete-list-item-create svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (create_slot_or_fallback) {
				create_slot_or_fallback.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*selectItem*/ ctx[39]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (create_slot_1) {
				if (create_slot_1.p && (!current || dirty[0] & /*createText*/ 16384 | dirty[2] & /*$$scope*/ 1048576)) {
					update_slot_base(
						create_slot_1,
						create_slot_template,
						ctx,
						/*$$scope*/ ctx[82],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[82])
						: get_slot_changes(create_slot_template, /*$$scope*/ ctx[82], dirty, get_create_slot_changes),
						get_create_slot_context
					);
				}
			} else {
				if (create_slot_or_fallback && create_slot_or_fallback.p && (!current || dirty[0] & /*createText*/ 16384)) {
					create_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(create_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(create_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (create_slot_or_fallback) create_slot_or_fallback.d(detaching);
			mounted = false;
			dispose();
		}
	};
}

// (1108:37) 
function create_if_block_5(ctx) {
	let div;
	let current;
	const loading_slot_template = /*#slots*/ ctx[83].loading;
	const loading_slot = create_slot(loading_slot_template, ctx, /*$$scope*/ ctx[82], get_loading_slot_context);
	const loading_slot_or_fallback = loading_slot || fallback_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (loading_slot_or_fallback) loading_slot_or_fallback.c();
			attr(div, "class", "autocomplete-list-item-loading svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (loading_slot_or_fallback) {
				loading_slot_or_fallback.m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (loading_slot) {
				if (loading_slot.p && (!current || dirty[0] & /*loadingText*/ 4096 | dirty[2] & /*$$scope*/ 1048576)) {
					update_slot_base(
						loading_slot,
						loading_slot_template,
						ctx,
						/*$$scope*/ ctx[82],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[82])
						: get_slot_changes(loading_slot_template, /*$$scope*/ ctx[82], dirty, get_loading_slot_changes),
						get_loading_slot_context
					);
				}
			} else {
				if (loading_slot_or_fallback && loading_slot_or_fallback.p && (!current || dirty[0] & /*loadingText*/ 4096)) {
					loading_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(loading_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(loading_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (loading_slot_or_fallback) loading_slot_or_fallback.d(detaching);
		}
	};
}

// (1074:4) {#if filteredListItems && filteredListItems.length > 0}
function create_if_block(ctx) {
	let t;
	let if_block_anchor;
	let current;
	let each_value = /*filteredListItems*/ ctx[31];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let if_block = /*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[31].length > /*maxItemsToShowInList*/ ctx[5] && create_if_block_1(ctx);

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*highlightIndex, maxItemsToShowInList*/ 1073741856 | dirty[1] & /*isConfirmed, filteredListItems, onListItemClick*/ 524801 | dirty[2] & /*$$scope*/ 1048576) {
				each_value = /*filteredListItems*/ ctx[31];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(t.parentNode, t);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (/*maxItemsToShowInList*/ ctx[5] > 0 && /*filteredListItems*/ ctx[31].length > /*maxItemsToShowInList*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (1118:48) {noResultsText}
function fallback_block_3(ctx) {
	let t;

	return {
		c() {
			t = text(/*noResultsText*/ ctx[11]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*noResultsText*/ 2048) set_data(t, /*noResultsText*/ ctx[11]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (1114:41) {createText}
function fallback_block_2(ctx) {
	let t;

	return {
		c() {
			t = text(/*createText*/ ctx[14]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*createText*/ 16384) set_data(t, /*createText*/ ctx[14]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (1110:43) {loadingText}
function fallback_block_1(ctx) {
	let t;

	return {
		c() {
			t = text(/*loadingText*/ ctx[12]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*loadingText*/ 4096) set_data(t, /*loadingText*/ ctx[12]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (1076:8) {#if listItem && (maxItemsToShowInList <= 0 || i < maxItemsToShowInList)}
function create_if_block_3(ctx) {
	let div;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	const item_slot_template = /*#slots*/ ctx[83].item;
	const item_slot = create_slot(item_slot_template, ctx, /*$$scope*/ ctx[82], get_item_slot_context);
	const item_slot_or_fallback = item_slot || fallback_block(ctx);

	function click_handler() {
		return /*click_handler*/ ctx[86](/*listItem*/ ctx[116]);
	}

	function pointerenter_handler() {
		return /*pointerenter_handler*/ ctx[87](/*i*/ ctx[118]);
	}

	return {
		c() {
			div = element("div");
			if (item_slot_or_fallback) item_slot_or_fallback.c();

			attr(div, "class", div_class_value = "autocomplete-list-item " + (/*i*/ ctx[118] === /*highlightIndex*/ ctx[30]
			? 'selected'
			: '') + " svelte-1nqq7zl");

			toggle_class(div, "confirmed", /*isConfirmed*/ ctx[50](/*listItem*/ ctx[116].item));
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (item_slot_or_fallback) {
				item_slot_or_fallback.m(div, null);
			}

			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "click", click_handler),
					listen(div, "pointerenter", pointerenter_handler)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (item_slot) {
				if (item_slot.p && (!current || dirty[1] & /*filteredListItems*/ 1 | dirty[2] & /*$$scope*/ 1048576)) {
					update_slot_base(
						item_slot,
						item_slot_template,
						ctx,
						/*$$scope*/ ctx[82],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[82])
						: get_slot_changes(item_slot_template, /*$$scope*/ ctx[82], dirty, get_item_slot_changes),
						get_item_slot_context
					);
				}
			} else {
				if (item_slot_or_fallback && item_slot_or_fallback.p && (!current || dirty[1] & /*filteredListItems*/ 1)) {
					item_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
				}
			}

			if (!current || dirty[0] & /*highlightIndex*/ 1073741824 && div_class_value !== (div_class_value = "autocomplete-list-item " + (/*i*/ ctx[118] === /*highlightIndex*/ ctx[30]
			? 'selected'
			: '') + " svelte-1nqq7zl")) {
				attr(div, "class", div_class_value);
			}

			if (dirty[0] & /*highlightIndex*/ 1073741824 | dirty[1] & /*isConfirmed, filteredListItems*/ 524289) {
				toggle_class(div, "confirmed", /*isConfirmed*/ ctx[50](/*listItem*/ ctx[116].item));
			}
		},
		i(local) {
			if (current) return;
			transition_in(item_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(item_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (item_slot_or_fallback) item_slot_or_fallback.d(detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (1092:14) {:else}
function create_else_block(ctx) {
	let html_tag;
	let raw_value = /*listItem*/ ctx[116].label + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTag();
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[1] & /*filteredListItems*/ 1 && raw_value !== (raw_value = /*listItem*/ ctx[116].label + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (1090:14) {#if listItem.highlighted}
function create_if_block_4(ctx) {
	let html_tag;
	let raw_value = /*listItem*/ ctx[116].highlighted + "";
	let html_anchor;

	return {
		c() {
			html_tag = new HtmlTag();
			html_anchor = empty();
			html_tag.a = html_anchor;
		},
		m(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert(target, html_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty[1] & /*filteredListItems*/ 1 && raw_value !== (raw_value = /*listItem*/ ctx[116].highlighted + "")) html_tag.p(raw_value);
		},
		d(detaching) {
			if (detaching) detach(html_anchor);
			if (detaching) html_tag.d();
		}
	};
}

// (1089:13)                
function fallback_block(ctx) {
	let if_block_anchor;

	function select_block_type_2(ctx, dirty) {
		if (/*listItem*/ ctx[116].highlighted) return create_if_block_4;
		return create_else_block;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (1075:6) {#each filteredListItems as listItem, i}
function create_each_block(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*listItem*/ ctx[116] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[118] < /*maxItemsToShowInList*/ ctx[5]) && create_if_block_3(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*listItem*/ ctx[116] && (/*maxItemsToShowInList*/ ctx[5] <= 0 || /*i*/ ctx[118] < /*maxItemsToShowInList*/ ctx[5])) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty[0] & /*maxItemsToShowInList*/ 32 | dirty[1] & /*filteredListItems*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (1100:6) {#if maxItemsToShowInList > 0 && filteredListItems.length > maxItemsToShowInList}
function create_if_block_1(ctx) {
	let if_block_anchor;
	let if_block = /*moreItemsText*/ ctx[13] && create_if_block_2(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*moreItemsText*/ ctx[13]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (1101:8) {#if moreItemsText}
function create_if_block_2(ctx) {
	let div;
	let t0;
	let t1_value = /*filteredListItems*/ ctx[31].length - /*maxItemsToShowInList*/ ctx[5] + "";
	let t1;
	let t2;
	let t3;

	return {
		c() {
			div = element("div");
			t0 = text("...");
			t1 = text(t1_value);
			t2 = space();
			t3 = text(/*moreItemsText*/ ctx[13]);
			attr(div, "class", "autocomplete-list-item-no-results svelte-1nqq7zl");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
			append(div, t3);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*maxItemsToShowInList*/ 32 | dirty[1] & /*filteredListItems*/ 1 && t1_value !== (t1_value = /*filteredListItems*/ ctx[31].length - /*maxItemsToShowInList*/ ctx[5] + "")) set_data(t1, t1_value);
			if (dirty[0] & /*moreItemsText*/ 8192) set_data(t3, /*moreItemsText*/ ctx[13]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let select;
	let t0;
	let div0;
	let t1;
	let input_1;
	let input_1_class_value;
	let input_1_id_value;
	let input_1_autocomplete_value;
	let input_1_readonly_value;
	let t2;
	let t3;
	let div1;
	let current_block_type_index;
	let if_block3;
	let div1_class_value;
	let div2_class_value;
	let current;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (!/*multiple*/ ctx[6] && /*value*/ ctx[2]) return create_if_block_10;
		if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) return create_if_block_11;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type && current_block_type(ctx);
	let if_block1 = /*multiple*/ ctx[6] && /*selectedItem*/ ctx[1] && create_if_block_9(ctx);
	let if_block2 = /*clearable*/ ctx[35] && create_if_block_8(ctx);
	const if_block_creators = [create_if_block, create_if_block_5, create_if_block_6, create_if_block_7];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (/*filteredListItems*/ ctx[31] && /*filteredListItems*/ ctx[31].length > 0) return 0;
		if (/*loading*/ ctx[34] && /*loadingText*/ ctx[12]) return 1;
		if (/*create*/ ctx[7]) return 2;
		if (/*noResultsText*/ ctx[11]) return 3;
		return -1;
	}

	if (~(current_block_type_index = select_block_type_1(ctx))) {
		if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	}

	return {
		c() {
			div2 = element("div");
			select = element("select");
			if (if_block0) if_block0.c();
			t0 = space();
			div0 = element("div");
			if (if_block1) if_block1.c();
			t1 = space();
			input_1 = element("input");
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			div1 = element("div");
			if (if_block3) if_block3.c();
			attr(select, "name", /*selectName*/ ctx[20]);
			attr(select, "id", /*selectId*/ ctx[21]);
			select.multiple = /*multiple*/ ctx[6];
			attr(select, "class", "svelte-1nqq7zl");
			attr(input_1, "type", "text");

			attr(input_1, "class", input_1_class_value = "" + ((/*inputClassName*/ ctx[17]
			? /*inputClassName*/ ctx[17]
			: '') + " " + (/*noInputStyles*/ ctx[27]
			? ''
			: 'input autocomplete-input') + " svelte-1nqq7zl"));

			attr(input_1, "id", input_1_id_value = /*inputId*/ ctx[18] ? /*inputId*/ ctx[18] : "");
			attr(input_1, "autocomplete", input_1_autocomplete_value = /*html5autocomplete*/ ctx[23] ? "on" : "off");
			attr(input_1, "placeholder", /*placeholder*/ ctx[15]);
			attr(input_1, "name", /*name*/ ctx[19]);
			input_1.disabled = /*disabled*/ ctx[26];
			input_1.required = /*required*/ ctx[28];
			attr(input_1, "title", /*title*/ ctx[22]);
			input_1.readOnly = input_1_readonly_value = /*readonly*/ ctx[24] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1];
			attr(input_1, "tabindex", /*tabindex*/ ctx[29]);
			attr(div0, "class", "input-container svelte-1nqq7zl");

			attr(div1, "class", div1_class_value = "" + ((/*dropdownClassName*/ ctx[25]
			? /*dropdownClassName*/ ctx[25]
			: '') + " autocomplete-list " + (/*showList*/ ctx[36] ? '' : 'hidden') + " is-fullwidth" + " svelte-1nqq7zl"));

			attr(div2, "class", div2_class_value = "" + ((/*className*/ ctx[16] ? /*className*/ ctx[16] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
			? 'hide-arrow'
			: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[37] + " svelte-1nqq7zl"));

			toggle_class(div2, "show-clear", /*clearable*/ ctx[35]);
			toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[34]);
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, select);
			if (if_block0) if_block0.m(select, null);
			append(div2, t0);
			append(div2, div0);
			if (if_block1) if_block1.m(div0, null);
			append(div0, t1);
			append(div0, input_1);
			/*input_1_binding*/ ctx[84](input_1);
			set_input_value(input_1, /*text*/ ctx[3]);
			append(div0, t2);
			if (if_block2) if_block2.m(div0, null);
			append(div2, t3);
			append(div2, div1);

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].m(div1, null);
			}

			/*div1_binding*/ ctx[88](div1);
			current = true;

			if (!mounted) {
				dispose = [
					listen(window, "click", /*onDocumentClick*/ ctx[41]),
					listen(input_1, "input", /*input_1_input_handler*/ ctx[85]),
					listen(input_1, "input", /*onInput*/ ctx[44]),
					listen(input_1, "focus", /*onFocusInternal*/ ctx[47]),
					listen(input_1, "blur", /*onBlurInternal*/ ctx[48]),
					listen(input_1, "keydown", /*onKeyDown*/ ctx[42]),
					listen(input_1, "click", /*onInputClick*/ ctx[46]),
					listen(input_1, "keypress", /*onKeyPress*/ ctx[43])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if (if_block0) if_block0.d(1);
				if_block0 = current_block_type && current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(select, null);
				}
			}

			if (!current || dirty[0] & /*selectName*/ 1048576) {
				attr(select, "name", /*selectName*/ ctx[20]);
			}

			if (!current || dirty[0] & /*selectId*/ 2097152) {
				attr(select, "id", /*selectId*/ ctx[21]);
			}

			if (!current || dirty[0] & /*multiple*/ 64) {
				select.multiple = /*multiple*/ ctx[6];
			}

			if (/*multiple*/ ctx[6] && /*selectedItem*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*multiple, selectedItem*/ 66) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_9(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div0, t1);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*inputClassName, noInputStyles*/ 134348800 && input_1_class_value !== (input_1_class_value = "" + ((/*inputClassName*/ ctx[17]
			? /*inputClassName*/ ctx[17]
			: '') + " " + (/*noInputStyles*/ ctx[27]
			? ''
			: 'input autocomplete-input') + " svelte-1nqq7zl"))) {
				attr(input_1, "class", input_1_class_value);
			}

			if (!current || dirty[0] & /*inputId*/ 262144 && input_1_id_value !== (input_1_id_value = /*inputId*/ ctx[18] ? /*inputId*/ ctx[18] : "")) {
				attr(input_1, "id", input_1_id_value);
			}

			if (!current || dirty[0] & /*html5autocomplete*/ 8388608 && input_1_autocomplete_value !== (input_1_autocomplete_value = /*html5autocomplete*/ ctx[23] ? "on" : "off")) {
				attr(input_1, "autocomplete", input_1_autocomplete_value);
			}

			if (!current || dirty[0] & /*placeholder*/ 32768) {
				attr(input_1, "placeholder", /*placeholder*/ ctx[15]);
			}

			if (!current || dirty[0] & /*name*/ 524288) {
				attr(input_1, "name", /*name*/ ctx[19]);
			}

			if (!current || dirty[0] & /*disabled*/ 67108864) {
				input_1.disabled = /*disabled*/ ctx[26];
			}

			if (!current || dirty[0] & /*required*/ 268435456) {
				input_1.required = /*required*/ ctx[28];
			}

			if (!current || dirty[0] & /*title*/ 4194304) {
				attr(input_1, "title", /*title*/ ctx[22]);
			}

			if (!current || dirty[0] & /*readonly, lock, selectedItem*/ 16777474 && input_1_readonly_value !== (input_1_readonly_value = /*readonly*/ ctx[24] || /*lock*/ ctx[8] && /*selectedItem*/ ctx[1])) {
				input_1.readOnly = input_1_readonly_value;
			}

			if (!current || dirty[0] & /*tabindex*/ 536870912) {
				attr(input_1, "tabindex", /*tabindex*/ ctx[29]);
			}

			if (dirty[0] & /*text*/ 8 && input_1.value !== /*text*/ ctx[3]) {
				set_input_value(input_1, /*text*/ ctx[3]);
			}

			if (/*clearable*/ ctx[35]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_8(ctx);
					if_block2.c();
					if_block2.m(div0, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx);

			if (current_block_type_index === previous_block_index) {
				if (~current_block_type_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				}
			} else {
				if (if_block3) {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
				}

				if (~current_block_type_index) {
					if_block3 = if_blocks[current_block_type_index];

					if (!if_block3) {
						if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block3.c();
					} else {
						if_block3.p(ctx, dirty);
					}

					transition_in(if_block3, 1);
					if_block3.m(div1, null);
				} else {
					if_block3 = null;
				}
			}

			if (!current || dirty[0] & /*dropdownClassName*/ 33554432 | dirty[1] & /*showList*/ 32 && div1_class_value !== (div1_class_value = "" + ((/*dropdownClassName*/ ctx[25]
			? /*dropdownClassName*/ ctx[25]
			: '') + " autocomplete-list " + (/*showList*/ ctx[36] ? '' : 'hidden') + " is-fullwidth" + " svelte-1nqq7zl"))) {
				attr(div1, "class", div1_class_value);
			}

			if (!current || dirty[0] & /*className, hideArrow, items, multiple*/ 66113 && div2_class_value !== (div2_class_value = "" + ((/*className*/ ctx[16] ? /*className*/ ctx[16] : '') + " " + (/*hideArrow*/ ctx[9] || !/*items*/ ctx[0].length
			? 'hide-arrow'
			: '') + " " + (/*multiple*/ ctx[6] ? 'is-multiple' : '') + " autocomplete select is-fullwidth " + /*uniqueId*/ ctx[37] + " svelte-1nqq7zl"))) {
				attr(div2, "class", div2_class_value);
			}

			if (dirty[0] & /*className, hideArrow, items, multiple*/ 66113 | dirty[1] & /*clearable*/ 16) {
				toggle_class(div2, "show-clear", /*clearable*/ ctx[35]);
			}

			if (dirty[0] & /*className, hideArrow, items, multiple, showLoadingIndicator*/ 67137 | dirty[1] & /*loading*/ 8) {
				toggle_class(div2, "is-loading", /*showLoadingIndicator*/ ctx[10] && /*loading*/ ctx[34]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			transition_in(if_block3);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			transition_out(if_block3);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);

			if (if_block0) {
				if_block0.d();
			}

			if (if_block1) if_block1.d();
			/*input_1_binding*/ ctx[84](null);
			if (if_block2) if_block2.d();

			if (~current_block_type_index) {
				if_blocks[current_block_type_index].d();
			}

			/*div1_binding*/ ctx[88](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function safeFunction(theFunction, argument) {
	if (typeof theFunction !== "function") {
		console.error("Not a function: " + theFunction + ", argument: " + argument);
		return undefined;
	}

	let result;

	try {
		result = theFunction(argument);
	} catch(error) {
		console.warn("Error executing Autocomplete function on value: " + argument + " function: " + theFunction);
	}

	return result;
}

function safeStringFunction(theFunction, argument) {
	let result = safeFunction(theFunction, argument);

	if (result === undefined || result === null) {
		result = "";
	}

	if (typeof result !== "string") {
		result = result.toString();
	}

	return result;
}

function numberOfMatches(listItem, searchWords) {
	if (!listItem) {
		return 0;
	}

	const itemKeywords = listItem.keywords;
	let matches = 0;

	searchWords.forEach(searchWord => {
		if (itemKeywords.includes(searchWord)) {
			matches++;
		}
	});

	return matches;
}

function defaultItemSortFunction(obj1, obj2, searchWords) {
	return numberOfMatches(obj2, searchWords) - numberOfMatches(obj1, searchWords);
}

function removeAccents(str) {
	return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}

function instance($$self, $$props, $$invalidate) {
	let showList;
	let clearable;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { items = [] } = $$props;
	let { searchFunction = false } = $$props;
	let { labelFieldName = undefined } = $$props;
	let { keywordsFieldName = labelFieldName } = $$props;
	let { valueFieldName = undefined } = $$props;

	let { labelFunction = function (item) {
		if (item === undefined || item === null) {
			return "";
		}

		return labelFieldName ? item[labelFieldName] : item;
	} } = $$props;

	let { keywordsFunction = function (item) {
		if (item === undefined || item === null) {
			return "";
		}

		return keywordsFieldName
		? item[keywordsFieldName]
		: labelFunction(item);
	} } = $$props;

	let { valueFunction = function (item, forceSingle = false) {
		if (item === undefined || item === null) {
			return item;
		}

		if (!multiple || forceSingle) {
			return valueFieldName ? item[valueFieldName] : item;
		} else {
			return item.map(i => valueFieldName ? i[valueFieldName] : i);
		}
	} } = $$props;

	let { keywordsCleanFunction = function (keywords) {
		return keywords;
	} } = $$props;

	let { textCleanFunction = function (userEnteredText) {
		return userEnteredText;
	} } = $$props;

	let { beforeChange = function (oldSelectedItem, newSelectedItem) {
		return true;
	} } = $$props;

	let { onChange = function (newSelectedItem) {
		
	} } = $$props;

	let { onFocus = function () {
		
	} } = $$props;

	let { onBlur = function () {
		
	} } = $$props;

	let { onCreate = function (text) {
		if (debug) {
			console.log("onCreate: " + text);
		}
	} } = $$props;

	let { selectFirstIfEmpty = false } = $$props;
	let { minCharactersToSearch = 1 } = $$props;
	let { maxItemsToShowInList = 0 } = $$props;
	let { multiple = false } = $$props;
	let { create = false } = $$props;
	let { ignoreAccents = true } = $$props;
	let { matchAllKeywords = true } = $$props;
	let { sortByMatchedKeywords = false } = $$props;
	let { itemFilterFunction = undefined } = $$props;
	let { itemSortFunction = undefined } = $$props;
	let { lock = false } = $$props;
	let { delay = 0 } = $$props;
	let { localFiltering = true } = $$props;
	let { localSorting = true } = $$props;
	let { cleanUserText = true } = $$props;
	let { closeOnBlur = false } = $$props;
	let { hideArrow = false } = $$props;
	let { showClear = false } = $$props;
	let { showLoadingIndicator = false } = $$props;
	let { noResultsText = "No results found" } = $$props;
	let { loadingText = "Loading results..." } = $$props;
	let { moreItemsText = "items not shown" } = $$props;
	let { createText = "Not found, add anyway?" } = $$props;
	let { placeholder = undefined } = $$props;
	let { className = undefined } = $$props;
	let { inputClassName = undefined } = $$props;
	let { inputId = undefined } = $$props;
	let { name = undefined } = $$props;
	let { selectName = undefined } = $$props;
	let { selectId = undefined } = $$props;
	let { title = undefined } = $$props;
	let { html5autocomplete = undefined } = $$props;
	let { readonly = undefined } = $$props;
	let { dropdownClassName = undefined } = $$props;
	let { disabled = false } = $$props;
	let { noInputStyles = false } = $$props;
	let { required = null } = $$props;
	let { debug = false } = $$props;
	let { tabindex = 0 } = $$props;
	let { selectedItem = multiple ? [] : undefined } = $$props;
	let { value = undefined } = $$props;
	let { highlightedItem = undefined } = $$props;

	// --- Internal State ----
	const uniqueId = "sautocomplete-" + Math.floor(Math.random() * 1000);

	// HTML elements
	let input;

	let list;

	// UI state
	let opened = false;

	let loading = false;
	let highlightIndex = -1;
	let { text } = $$props;
	let filteredTextLength = 0;

	// view model
	let filteredListItems;

	let listItems = [];

	// requests/responses counters
	let lastRequestId = 0;

	let lastResponseId = 0;

	// other state
	let inputDelayTimeout;

	function safeLabelFunction(item) {
		// console.log("labelFunction: " + labelFunction);
		// console.log("safeLabelFunction, item: " + item);
		return safeStringFunction(labelFunction, item);
	}

	function safeKeywordsFunction(item) {
		// console.log("safeKeywordsFunction");
		const keywords = safeStringFunction(keywordsFunction, item);

		let result = safeStringFunction(keywordsCleanFunction, keywords);
		result = result.toLowerCase().trim();

		if (ignoreAccents) {
			result = removeAccents(result);
		}

		if (debug) {
			console.log("Extracted keywords: '" + result + "' from item: " + JSON.stringify(item));
		}

		return result;
	}

	function prepareListItems() {
		let timerId;

		if (debug) {
			timerId = `Autocomplete prepare list ${inputId ? `(id: ${inputId})` : ""}`;
			console.time(timerId);
			console.log("Prepare items to search");
			console.log("items: " + JSON.stringify(items));
		}

		if (!Array.isArray(items)) {
			console.warn("Autocomplete items / search function did not return array but", items);
			$$invalidate(0, items = []);
		}

		const length = items ? items.length : 0;
		listItems = new Array(length);

		if (length > 0) {
			items.forEach((item, i) => {
				const listItem = getListItem(item);

				if (listItem === undefined) {
					console.log("Undefined item for: ", item);
				}

				listItems[i] = listItem;
			});
		}

		$$invalidate(31, filteredListItems = listItems);

		if (debug) {
			console.log(listItems.length + " items to search");
			console.timeEnd(timerId);
		}
	}

	function getListItem(item) {
		return {
			// keywords representation of the item
			keywords: localFiltering ? safeKeywordsFunction(item) : [],
			// item label
			label: safeLabelFunction(item),
			// store reference to the origial item
			item
		};
	}

	function onSelectedItemChanged() {
		$$invalidate(2, value = valueFunction(selectedItem));
		$$invalidate(3, text = !multiple ? safeLabelFunction(selectedItem) : "");
		$$invalidate(31, filteredListItems = listItems);
		onChange(selectedItem);
	}

	function prepareUserEnteredText(userEnteredText) {
		if (userEnteredText === undefined || userEnteredText === null) {
			return "";
		}

		if (!cleanUserText) {
			return userEnteredText;
		}

		const textFiltered = userEnteredText.replace(/[&/\\#,+()$~%.'":*?<>{}]/g, " ").trim();
		const cleanUserEnteredText = safeStringFunction(textCleanFunction, textFiltered);
		const textFilteredLowerCase = cleanUserEnteredText.toLowerCase().trim();
		return textFilteredLowerCase;
	}

	async function search() {
		let timerId;

		if (debug) {
			timerId = `Autocomplete search ${inputId ? `(id: ${inputId})` : ""}`;
			console.time(timerId);
			console.log("Searching user entered text: '" + text + "'");
		}

		let textFiltered = prepareUserEnteredText(text);

		if (minCharactersToSearch > 1 && textFiltered.length < minCharactersToSearch) {
			textFiltered = "";
		}

		$$invalidate(81, filteredTextLength = textFiltered.length);

		if (debug) {
			console.log("Changed user entered text '" + text + "' into '" + textFiltered + "'");
		}

		// if no search text load all items
		if (textFiltered === "") {
			if (searchFunction) {
				// we will need to rerun the search
				$$invalidate(0, items = []);

				if (debug) {
					console.log("User entered text is empty clear list of items");
				}
			} else {
				$$invalidate(31, filteredListItems = listItems);

				if (debug) {
					console.log("User entered text is empty set the list of items to all items");
				}
			}

			closeIfMinCharsToSearchReached();

			if (debug) {
				console.timeEnd(timerId);
			}

			return;
		}

		if (!searchFunction) {
			// internal search
			processListItems(textFiltered);
		} else {
			// external search which provides items
			lastRequestId = lastRequestId + 1;

			const currentRequestId = lastRequestId;
			$$invalidate(34, loading = true);

			// searchFunction is a generator
			if (searchFunction.constructor.name === "AsyncGeneratorFunction") {
				for await (const chunk of searchFunction(textFiltered, maxItemsToShowInList)) {
					// a chunk of an old response: throw it away
					if (currentRequestId < lastResponseId) {
						return false;
					}

					// a chunk for a new response: reset the item list
					if (currentRequestId > lastResponseId) {
						$$invalidate(0, items = []);
					}

					lastResponseId = currentRequestId;
					$$invalidate(0, items = [...items, ...chunk]);
					processListItems(textFiltered);
				}

				// there was nothing in the chunk
				if (lastResponseId < currentRequestId) {
					lastResponseId = currentRequestId;
					$$invalidate(0, items = []);
					processListItems(textFiltered);
				}
			} else // searchFunction is a regular function
			{
				let result = await searchFunction(textFiltered, maxItemsToShowInList);

				// If a response to a newer request has been received
				// while responses to this request were being loaded,
				// then we can just throw away this outdated results.
				if (currentRequestId < lastResponseId) {
					return false;
				}

				lastResponseId = currentRequestId;
				$$invalidate(0, items = result);
				processListItems(textFiltered);
			}

			$$invalidate(34, loading = false);
		}

		if (debug) {
			console.timeEnd(timerId);
			console.log("Search found " + filteredListItems.length + " items");
		}
	}

	function defaultItemFilterFunction(listItem, searchWords) {
		const matches = numberOfMatches(listItem, searchWords);

		if (matchAllKeywords) {
			return matches >= searchWords.length;
		} else {
			return matches > 0;
		}
	}

	function processListItems(textFiltered) {
		// cleans, filters, orders, and highlights the list items
		prepareListItems();

		const textFilteredWithoutAccents = ignoreAccents
		? removeAccents(textFiltered)
		: textFiltered;

		const searchWords = textFilteredWithoutAccents.split(/\s+/g).filter(word => word !== "");

		// local search
		let tempfilteredListItems;

		if (localFiltering) {
			if (itemFilterFunction) {
				tempfilteredListItems = listItems.filter(item => itemFilterFunction(item.item, searchWords));
			} else {
				tempfilteredListItems = listItems.filter(item => defaultItemFilterFunction(item, searchWords));
			}

			if (localSorting) {
				if (itemSortFunction) {
					tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => itemSortFunction(item1.item, item2.item, searchWords));
				} else {
					if (sortByMatchedKeywords) {
						tempfilteredListItems = tempfilteredListItems.sort((item1, item2) => defaultItemSortFunction(item1, item2, searchWords));
					}
				}
			}
		} else {
			tempfilteredListItems = listItems;
		}

		const hlfilter = highlightFilter(searchWords, "label");
		$$invalidate(31, filteredListItems = tempfilteredListItems.map(hlfilter));
		closeIfMinCharsToSearchReached();
		return true;
	}

	// $: text, search();
	function afterCreate(createdItem) {
		let listItem;

		if (debug) {
			console.log("createdItem", createdItem);
		}

		if ("undefined" !== typeof createdItem) {
			prepareListItems();
			$$invalidate(31, filteredListItems = listItems);
			let index = findItemIndex(createdItem, filteredListItems);

			// if the items array was not updated, add the created item manually
			if (index <= 0) {
				$$invalidate(0, items = [createdItem]);
				prepareListItems();
				$$invalidate(31, filteredListItems = listItems);
				index = 0;
			}

			if (index >= 0) {
				$$invalidate(30, highlightIndex = index);
				listItem = filteredListItems[highlightIndex];
			}
		}

		return listItem;
	}

	function selectListItem(listItem) {
		if (debug) {
			console.log("selectListItem", listItem);
		}

		if ("undefined" === typeof listItem && create) {
			// allow undefined items if create is enabled
			const createdItem = onCreate(text);

			if ("undefined" !== typeof createdItem) {
				if (typeof createdItem.then === "function") {
					createdItem.then(newItem => {
						if ("undefined" !== typeof newItem) {
							const newListItem = afterCreate(newItem);

							if ("undefined" !== typeof newListItem) {
								selectListItem(newListItem);
							}
						}
					});

					return true;
				} else {
					listItem = afterCreate(createdItem);
				}
			}
		}

		if ("undefined" === typeof listItem) {
			if (debug) {
				console.log(`listItem is undefined. Can not select.`);
			}

			return false;
		}

		if (lock && selectedItem) {
			return true;
		}

		const newSelectedItem = listItem.item;

		if (beforeChange(selectedItem, newSelectedItem)) {
			// simple selection
			if (!multiple) {
				$$invalidate(1, selectedItem = undefined); // triggers change even if the the same item is selected
				$$invalidate(1, selectedItem = newSelectedItem);
			} else // first selection of multiple ones
			if (!selectedItem) {
				$$invalidate(1, selectedItem = [newSelectedItem]);
			} else // selecting something already selected => unselect it
			if (selectedItem.includes(newSelectedItem)) {
				$$invalidate(1, selectedItem = selectedItem.filter(i => i !== newSelectedItem));
			} else // adds the element to the selection
			{
				$$invalidate(1, selectedItem = [...selectedItem, newSelectedItem]);
			}
		}

		return true;
	}

	function selectItem() {
		if (debug) {
			console.log("selectItem", highlightIndex);
		}

		const listItem = filteredListItems[highlightIndex];

		if (selectListItem(listItem)) {
			if (debug) {
				console.log("selectListItem true, closing");
			}

			close();

			if (multiple) {
				input.focus();
			}
		} else {
			if (debug) {
				console.log("selectListItem false, not closing");
			}
		}
	}

	function up() {
		if (debug) {
			console.log("up");
		}

		open();

		if (highlightIndex > 0) {
			$$invalidate(30, highlightIndex--, highlightIndex);
		}

		highlight();
	}

	function down() {
		if (debug) {
			console.log("down");
		}

		open();

		if (highlightIndex < filteredListItems.length - 1) {
			$$invalidate(30, highlightIndex++, highlightIndex);
		}

		highlight();
	}

	function highlight() {
		if (debug) {
			console.log("highlight");
		}

		const query = ".selected";

		if (debug) {
			console.log("Seaching DOM element: " + query + " in " + list);
		}

		/**
 * @param {Element} el
 */
		const el = list && list.querySelector(query);

		if (el) {
			if (typeof el.scrollIntoViewIfNeeded === "function") {
				if (debug) {
					console.log("Scrolling selected item into view");
				}

				el.scrollIntoViewIfNeeded();
			} else if (el.scrollIntoView === "function") {
				if (debug) {
					console.log("Scrolling selected item into view");
				}

				el.scrollIntoView();
			} else {
				if (debug) {
					console.warn("Could not scroll selected item into view, scrollIntoViewIfNeeded not supported");
				}
			}
		} else {
			if (debug) {
				console.warn("Selected item not found to scroll into view");
			}
		}
	}

	function onListItemClick(listItem) {
		if (debug) {
			console.log("onListItemClick");
		}

		if (selectListItem(listItem)) {
			close();

			if (multiple) {
				input.focus();
			}
		}
	}

	function onDocumentClick(e) {
		if (debug) {
			console.log("onDocumentClick");
		}

		if (e.composedPath().some(path => path.classList && path.classList.contains(uniqueId))) {
			if (debug) {
				console.log("onDocumentClick inside");
			}

			// resetListToAllItemsAndOpen();
			highlight();
		} else {
			if (debug) {
				console.log("onDocumentClick outside");
			}

			close();
		}
	}

	function onKeyDown(e) {
		if (debug) {
			console.log("onKeyDown");
		}

		let key = e.key;
		if (key === "Tab" && e.shiftKey) key = "ShiftTab";

		const fnmap = {
			Tab: opened ? close() : null,
			ShiftTab: opened ? close() : null,
			ArrowDown: down.bind(this),
			ArrowUp: up.bind(this),
			Escape: onEsc.bind(this),
			Backspace: multiple && selectedItem && selectedItem.length && !text
			? onBackspace.bind(this)
			: null
		};

		const fn = fnmap[key];

		if (typeof fn === "function") {
			fn(e);
		}
	}

	function onKeyPress(e) {
		if (debug) {
			console.log("onKeyPress");
		}

		if (e.key === "Enter") {
			e.preventDefault();
			onEnter();
		}
	}

	function onEnter() {
		selectItem();
	}

	function onInput(e) {
		if (debug) {
			console.log("onInput");
		}

		$$invalidate(3, text = e.target.value);

		if (inputDelayTimeout) {
			clearTimeout(inputDelayTimeout);
		}

		if (delay) {
			inputDelayTimeout = setTimeout(processInput, delay);
		} else {
			processInput();
		}
	}

	function unselectItem(tag) {
		if (debug) {
			console.log("unselectItem", tag);
		}

		$$invalidate(1, selectedItem = selectedItem.filter(i => i !== tag));
		input.focus();
	}

	function processInput() {
		if (search()) {
			$$invalidate(30, highlightIndex = 0);
			open();
		}
	}

	function onInputClick() {
		if (debug) {
			console.log("onInputClick");
		}

		resetListToAllItemsAndOpen();
	}

	function onEsc(e) {
		if (debug) {
			console.log("onEsc");
		}

		//if (text) return clear();
		e.stopPropagation();

		if (opened) {
			input.focus();
			close();
		}
	}

	function onBackspace(e) {
		if (debug) {
			console.log("onBackspace");
		}

		unselectItem(selectedItem[selectedItem.length - 1]);
	}

	function onFocusInternal() {
		if (debug) {
			console.log("onFocus");
		}

		onFocus();
		resetListToAllItemsAndOpen();
	}

	function onBlurInternal() {
		if (debug) {
			console.log("onBlur");
		}

		if (closeOnBlur) {
			close();
		}

		onBlur();
	}

	function resetListToAllItemsAndOpen() {
		if (debug) {
			console.log("resetListToAllItemsAndOpen");
		}

		if (!text) {
			$$invalidate(31, filteredListItems = listItems);
		} else // When an async component is initialized, the item list
		// must be loaded when the input is focused.
		if (!listItems.length && selectedItem && searchFunction) {
			search();
		}

		open();

		// find selected item
		if (selectedItem) {
			if (debug) {
				console.log("Searching currently selected item: " + JSON.stringify(selectedItem));
			}

			const index = findItemIndex(selectedItem, filteredListItems);

			if (index >= 0) {
				$$invalidate(30, highlightIndex = index);
				highlight();
			}
		}
	}

	function findItemIndex(item, items) {
		if (debug) {
			console.log("Finding index for item", item);
		}

		let index = -1;

		for (let i = 0; i < items.length; i++) {
			const listItem = items[i];

			if ("undefined" === typeof listItem) {
				if (debug) {
					console.log(`listItem ${i} is undefined. Skipping.`);
				}

				continue;
			}

			if (debug) {
				console.log("Item " + i + ": " + JSON.stringify(listItem));
			}

			if (item === listItem.item) {
				index = i;
				break;
			}
		}

		if (debug) {
			if (index >= 0) {
				console.log("Found index for item: " + index);
			} else {
				console.warn("Not found index for item: " + item);
			}
		}

		return index;
	}

	function open() {
		if (debug) {
			console.log("open");
		}

		// check if the search text has more than the min chars required
		if (notEnoughSearchText()) {
			return;
		}

		$$invalidate(80, opened = true);
	}

	function close() {
		if (debug) {
			console.log("close");
		}

		$$invalidate(80, opened = false);
		$$invalidate(34, loading = false);

		if (!text && selectFirstIfEmpty) {
			$$invalidate(30, highlightIndex = 0);
			selectItem();
		}
	}

	function notEnoughSearchText() {
		return minCharactersToSearch > 1 && filteredTextLength < minCharactersToSearch;
	}

	function closeIfMinCharsToSearchReached() {
		if (notEnoughSearchText()) {
			close();
		}
	}

	function clear() {
		if (debug) {
			console.log("clear");
		}

		$$invalidate(3, text = "");
		$$invalidate(1, selectedItem = multiple ? [] : undefined);

		setTimeout(() => {
			input.focus();
			close();
		});
	}

	function highlightFilter(keywords, field) {
		return item => {
			let label = item[field];
			const newItem = Object.assign({ highlighted: undefined }, item);
			newItem.highlighted = label;
			const labelLowercase = label.toLowerCase();

			const labelLowercaseNoAc = ignoreAccents
			? removeAccents(labelLowercase)
			: labelLowercase;

			if (keywords && keywords.length) {
				const positions = [];

				for (let i = 0; i < keywords.length; i++) {
					let keyword = keywords[i];

					if (ignoreAccents) {
						keyword = removeAccents(keyword);
					}

					const keywordLen = keyword.length;
					let pos1 = 0;

					do {
						pos1 = labelLowercaseNoAc.indexOf(keyword, pos1);

						if (pos1 >= 0) {
							let pos2 = pos1 + keywordLen;
							positions.push([pos1, pos2]);
							pos1 = pos2;
						}
					} while (pos1 !== -1);
				}

				if (positions.length > 0) {
					const keywordPatterns = new Set();

					for (let i = 0; i < positions.length; i++) {
						const pair = positions[i];
						const pos1 = pair[0];
						const pos2 = pair[1];
						const keywordPattern = labelLowercase.substring(pos1, pos2);
						keywordPatterns.add(keywordPattern);
					}

					for (let keywordPattern of keywordPatterns) {
						// FIXME pst: workarond for wrong replacement <b> tags
						if (keywordPattern === "b") {
							continue;
						}

						const reg = new RegExp("(" + keywordPattern + ")", "ig");
						const newHighlighted = newItem.highlighted.replace(reg, "<b>$1</b>");
						newItem.highlighted = newHighlighted;
					}
				}
			}

			return newItem;
		};
	}

	function isConfirmed(listItem) {
		if (!selectedItem) {
			return false;
		}

		if (multiple) {
			return selectedItem.includes(listItem);
		} else {
			return listItem === selectedItem;
		}
	}

	function input_1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			input = $$value;
			$$invalidate(32, input);
		});
	}

	function input_1_input_handler() {
		text = this.value;
		$$invalidate(3, text);
	}

	const click_handler = listItem => onListItemClick(listItem);

	const pointerenter_handler = i => {
		$$invalidate(30, highlightIndex = i);
	};

	function div1_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			list = $$value;
			$$invalidate(33, list);
		});
	}

	$$self.$$set = $$props => {
		if ('items' in $$props) $$invalidate(0, items = $$props.items);
		if ('searchFunction' in $$props) $$invalidate(52, searchFunction = $$props.searchFunction);
		if ('labelFieldName' in $$props) $$invalidate(53, labelFieldName = $$props.labelFieldName);
		if ('keywordsFieldName' in $$props) $$invalidate(54, keywordsFieldName = $$props.keywordsFieldName);
		if ('valueFieldName' in $$props) $$invalidate(55, valueFieldName = $$props.valueFieldName);
		if ('labelFunction' in $$props) $$invalidate(56, labelFunction = $$props.labelFunction);
		if ('keywordsFunction' in $$props) $$invalidate(57, keywordsFunction = $$props.keywordsFunction);
		if ('valueFunction' in $$props) $$invalidate(4, valueFunction = $$props.valueFunction);
		if ('keywordsCleanFunction' in $$props) $$invalidate(58, keywordsCleanFunction = $$props.keywordsCleanFunction);
		if ('textCleanFunction' in $$props) $$invalidate(59, textCleanFunction = $$props.textCleanFunction);
		if ('beforeChange' in $$props) $$invalidate(60, beforeChange = $$props.beforeChange);
		if ('onChange' in $$props) $$invalidate(61, onChange = $$props.onChange);
		if ('onFocus' in $$props) $$invalidate(62, onFocus = $$props.onFocus);
		if ('onBlur' in $$props) $$invalidate(63, onBlur = $$props.onBlur);
		if ('onCreate' in $$props) $$invalidate(64, onCreate = $$props.onCreate);
		if ('selectFirstIfEmpty' in $$props) $$invalidate(65, selectFirstIfEmpty = $$props.selectFirstIfEmpty);
		if ('minCharactersToSearch' in $$props) $$invalidate(66, minCharactersToSearch = $$props.minCharactersToSearch);
		if ('maxItemsToShowInList' in $$props) $$invalidate(5, maxItemsToShowInList = $$props.maxItemsToShowInList);
		if ('multiple' in $$props) $$invalidate(6, multiple = $$props.multiple);
		if ('create' in $$props) $$invalidate(7, create = $$props.create);
		if ('ignoreAccents' in $$props) $$invalidate(67, ignoreAccents = $$props.ignoreAccents);
		if ('matchAllKeywords' in $$props) $$invalidate(68, matchAllKeywords = $$props.matchAllKeywords);
		if ('sortByMatchedKeywords' in $$props) $$invalidate(69, sortByMatchedKeywords = $$props.sortByMatchedKeywords);
		if ('itemFilterFunction' in $$props) $$invalidate(70, itemFilterFunction = $$props.itemFilterFunction);
		if ('itemSortFunction' in $$props) $$invalidate(71, itemSortFunction = $$props.itemSortFunction);
		if ('lock' in $$props) $$invalidate(8, lock = $$props.lock);
		if ('delay' in $$props) $$invalidate(72, delay = $$props.delay);
		if ('localFiltering' in $$props) $$invalidate(73, localFiltering = $$props.localFiltering);
		if ('localSorting' in $$props) $$invalidate(74, localSorting = $$props.localSorting);
		if ('cleanUserText' in $$props) $$invalidate(75, cleanUserText = $$props.cleanUserText);
		if ('closeOnBlur' in $$props) $$invalidate(76, closeOnBlur = $$props.closeOnBlur);
		if ('hideArrow' in $$props) $$invalidate(9, hideArrow = $$props.hideArrow);
		if ('showClear' in $$props) $$invalidate(77, showClear = $$props.showClear);
		if ('showLoadingIndicator' in $$props) $$invalidate(10, showLoadingIndicator = $$props.showLoadingIndicator);
		if ('noResultsText' in $$props) $$invalidate(11, noResultsText = $$props.noResultsText);
		if ('loadingText' in $$props) $$invalidate(12, loadingText = $$props.loadingText);
		if ('moreItemsText' in $$props) $$invalidate(13, moreItemsText = $$props.moreItemsText);
		if ('createText' in $$props) $$invalidate(14, createText = $$props.createText);
		if ('placeholder' in $$props) $$invalidate(15, placeholder = $$props.placeholder);
		if ('className' in $$props) $$invalidate(16, className = $$props.className);
		if ('inputClassName' in $$props) $$invalidate(17, inputClassName = $$props.inputClassName);
		if ('inputId' in $$props) $$invalidate(18, inputId = $$props.inputId);
		if ('name' in $$props) $$invalidate(19, name = $$props.name);
		if ('selectName' in $$props) $$invalidate(20, selectName = $$props.selectName);
		if ('selectId' in $$props) $$invalidate(21, selectId = $$props.selectId);
		if ('title' in $$props) $$invalidate(22, title = $$props.title);
		if ('html5autocomplete' in $$props) $$invalidate(23, html5autocomplete = $$props.html5autocomplete);
		if ('readonly' in $$props) $$invalidate(24, readonly = $$props.readonly);
		if ('dropdownClassName' in $$props) $$invalidate(25, dropdownClassName = $$props.dropdownClassName);
		if ('disabled' in $$props) $$invalidate(26, disabled = $$props.disabled);
		if ('noInputStyles' in $$props) $$invalidate(27, noInputStyles = $$props.noInputStyles);
		if ('required' in $$props) $$invalidate(28, required = $$props.required);
		if ('debug' in $$props) $$invalidate(78, debug = $$props.debug);
		if ('tabindex' in $$props) $$invalidate(29, tabindex = $$props.tabindex);
		if ('selectedItem' in $$props) $$invalidate(1, selectedItem = $$props.selectedItem);
		if ('value' in $$props) $$invalidate(2, value = $$props.value);
		if ('highlightedItem' in $$props) $$invalidate(51, highlightedItem = $$props.highlightedItem);
		if ('text' in $$props) $$invalidate(3, text = $$props.text);
		if ('$$scope' in $$props) $$invalidate(82, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*items*/ 1 | $$self.$$.dirty[1] & /*searchFunction*/ 2097152) {
			// -- Reactivity --
			(searchFunction || prepareListItems());
		}

		if ($$self.$$.dirty[0] & /*selectedItem*/ 2) {
			(onSelectedItemChanged());
		}

		if ($$self.$$.dirty[0] & /*highlightIndex*/ 1073741824 | $$self.$$.dirty[1] & /*filteredListItems*/ 1) {
			$$invalidate(51, highlightedItem = filteredListItems && highlightIndex && highlightIndex >= 0 && highlightIndex < filteredListItems.length
			? filteredListItems[highlightIndex].item
			: null);
		}

		if ($$self.$$.dirty[0] & /*items*/ 1 | $$self.$$.dirty[2] & /*opened, filteredTextLength*/ 786432) {
			$$invalidate(36, showList = opened && (items && items.length > 0 || filteredTextLength > 0));
		}

		if ($$self.$$.dirty[0] & /*lock, multiple, selectedItem*/ 322 | $$self.$$.dirty[2] & /*showClear*/ 32768) {
			$$invalidate(35, clearable = showClear || (lock || multiple) && selectedItem);
		}
	};

	return [
		items,
		selectedItem,
		value,
		text,
		valueFunction,
		maxItemsToShowInList,
		multiple,
		create,
		lock,
		hideArrow,
		showLoadingIndicator,
		noResultsText,
		loadingText,
		moreItemsText,
		createText,
		placeholder,
		className,
		inputClassName,
		inputId,
		name,
		selectName,
		selectId,
		title,
		html5autocomplete,
		readonly,
		dropdownClassName,
		disabled,
		noInputStyles,
		required,
		tabindex,
		highlightIndex,
		filteredListItems,
		input,
		list,
		loading,
		clearable,
		showList,
		uniqueId,
		safeLabelFunction,
		selectItem,
		onListItemClick,
		onDocumentClick,
		onKeyDown,
		onKeyPress,
		onInput,
		unselectItem,
		onInputClick,
		onFocusInternal,
		onBlurInternal,
		clear,
		isConfirmed,
		highlightedItem,
		searchFunction,
		labelFieldName,
		keywordsFieldName,
		valueFieldName,
		labelFunction,
		keywordsFunction,
		keywordsCleanFunction,
		textCleanFunction,
		beforeChange,
		onChange,
		onFocus,
		onBlur,
		onCreate,
		selectFirstIfEmpty,
		minCharactersToSearch,
		ignoreAccents,
		matchAllKeywords,
		sortByMatchedKeywords,
		itemFilterFunction,
		itemSortFunction,
		delay,
		localFiltering,
		localSorting,
		cleanUserText,
		closeOnBlur,
		showClear,
		debug,
		highlightFilter,
		opened,
		filteredTextLength,
		$$scope,
		slots,
		input_1_binding,
		input_1_input_handler,
		click_handler,
		pointerenter_handler,
		div1_binding
	];
}

class SimpleAutocomplete extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				items: 0,
				searchFunction: 52,
				labelFieldName: 53,
				keywordsFieldName: 54,
				valueFieldName: 55,
				labelFunction: 56,
				keywordsFunction: 57,
				valueFunction: 4,
				keywordsCleanFunction: 58,
				textCleanFunction: 59,
				beforeChange: 60,
				onChange: 61,
				onFocus: 62,
				onBlur: 63,
				onCreate: 64,
				selectFirstIfEmpty: 65,
				minCharactersToSearch: 66,
				maxItemsToShowInList: 5,
				multiple: 6,
				create: 7,
				ignoreAccents: 67,
				matchAllKeywords: 68,
				sortByMatchedKeywords: 69,
				itemFilterFunction: 70,
				itemSortFunction: 71,
				lock: 8,
				delay: 72,
				localFiltering: 73,
				localSorting: 74,
				cleanUserText: 75,
				closeOnBlur: 76,
				hideArrow: 9,
				showClear: 77,
				showLoadingIndicator: 10,
				noResultsText: 11,
				loadingText: 12,
				moreItemsText: 13,
				createText: 14,
				placeholder: 15,
				className: 16,
				inputClassName: 17,
				inputId: 18,
				name: 19,
				selectName: 20,
				selectId: 21,
				title: 22,
				html5autocomplete: 23,
				readonly: 24,
				dropdownClassName: 25,
				disabled: 26,
				noInputStyles: 27,
				required: 28,
				debug: 78,
				tabindex: 29,
				selectedItem: 1,
				value: 2,
				highlightedItem: 51,
				text: 3,
				highlightFilter: 79
			},
			add_css,
			[-1, -1, -1, -1]
		);
	}

	get highlightFilter() {
		return this.$$.ctx[79];
	}
}

export { SimpleAutocomplete as default };
