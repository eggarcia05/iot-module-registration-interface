function noop() { }
function assign(tar, src) {
    // @ts-ignore
    for (const k in src)
        tar[k] = src[k];
    return tar;
}
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function create_slot(definition, ctx, $$scope, fn) {
    if (definition) {
        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
        return definition[0](slot_ctx);
    }
}
function get_slot_context(definition, ctx, $$scope, fn) {
    return definition[1] && fn
        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
        : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn) {
    if (definition[2] && fn) {
        const lets = definition[2](fn(dirty));
        if ($$scope.dirty === undefined) {
            return lets;
        }
        if (typeof lets === 'object') {
            const merged = [];
            const len = Math.max($$scope.dirty.length, lets.length);
            for (let i = 0; i < len; i += 1) {
                merged[i] = $$scope.dirty[i] | lets[i];
            }
            return merged;
        }
        return $$scope.dirty | lets;
    }
    return $$scope.dirty;
}
function update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {
    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);
    if (slot_changes) {
        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
        slot.p(slot_context, slot_changes);
    }
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function svg_element(name) {
    return document.createElementNS('http://www.w3.org/2000/svg', name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error('Function called outside component initialization');
    return current_component;
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
/**
 * Base class for Svelte components. Used when dev=false.
 */
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/* src/components/CheckedIcon.svelte generated by Svelte v3.31.2 */

function create_fragment(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "d", "M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0");
			attr(path, "fill", "#fff");
			attr(path, "fillrule", "evenodd");
			attr(svg, "height", "100%");
			attr(svg, "width", "100%");
			attr(svg, "viewBox", "-2 -5 17 21");
			set_style(svg, "position", "absolute");
			set_style(svg, "top", "0");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

class CheckedIcon extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

/* src/components/UncheckedIcon.svelte generated by Svelte v3.31.2 */

function create_fragment$1(ctx) {
	let svg;
	let path;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			attr(path, "d", "M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9\r\n    4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12");
			attr(path, "fill", "#fff");
			attr(path, "fillrule", "evenodd");
			attr(svg, "viewBox", "-2 -5 14 20");
			attr(svg, "height", "100%");
			attr(svg, "width", "100%");
			set_style(svg, "position", "absolute");
			set_style(svg, "top", "0");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

class UncheckedIcon extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment$1, safe_not_equal, {});
	}
}

function createBackgroundColor(
  pos,
  checkedPos,
  uncheckedPos,
  offColor,
  onColor
) {
  const relativePos = (pos - uncheckedPos) / (checkedPos - uncheckedPos);
  if (relativePos === 0) {
    return offColor;
  }
  if (relativePos === 1) {
    return onColor;
  }

  let newColor = "#";
  for (let i = 1; i < 6; i += 2) {
    const offComponent = parseInt(offColor.substr(i, 2), 16);
    const onComponent = parseInt(onColor.substr(i, 2), 16);
    const weightedValue = Math.round(
      (1 - relativePos) * offComponent + relativePos * onComponent
    );
    let newComponent = weightedValue.toString(16);
    if (newComponent.length === 1) {
      newComponent = `0${newComponent}`;
    }
    newColor += newComponent;
  }
  return newColor;
}

function convertShorthandColor(color) {
  if (color.length === 7) {
    return color;
  }
  let sixDigitColor = "#";
  for (let i = 1; i < 4; i += 1) {
    sixDigitColor += color[i] + color[i];
  }
  return sixDigitColor;
}

function getBackgroundColor(
  pos,
  checkedPos,
  uncheckedPos,
  offColor,
  onColor
) {
  const sixDigitOffColor = convertShorthandColor(offColor);
  const sixDigitOnColor = convertShorthandColor(onColor);
  return createBackgroundColor(
    pos,
    checkedPos,
    uncheckedPos,
    sixDigitOffColor,
    sixDigitOnColor
  );
}

/* src/components/Switch.svelte generated by Svelte v3.31.2 */
const get_unCheckedIcon_slot_changes = dirty => ({});
const get_unCheckedIcon_slot_context = ctx => ({});
const get_checkedIcon_slot_changes = dirty => ({});
const get_checkedIcon_slot_context = ctx => ({});

// (313:31)           
function fallback_block_1(ctx) {
	let cicon;
	let current;
	cicon = new /*CIcon*/ ctx[18]({});

	return {
		c() {
			create_component(cicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(cicon, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(cicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(cicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(cicon, detaching);
		}
	};
}

// (318:33)           
function fallback_block(ctx) {
	let uicon;
	let current;
	uicon = new /*UIcon*/ ctx[19]({});

	return {
		c() {
			create_component(uicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(uicon, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(uicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(uicon, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let div4;
	let div2;
	let div0;
	let t0;
	let div1;
	let t1;
	let div3;
	let t2;
	let input;
	let current;
	let mounted;
	let dispose;
	const checkedIcon_slot_template = /*#slots*/ ctx[35].checkedIcon;
	const checkedIcon_slot = create_slot(checkedIcon_slot_template, ctx, /*$$scope*/ ctx[34], get_checkedIcon_slot_context);
	const checkedIcon_slot_or_fallback = checkedIcon_slot || fallback_block_1(ctx);
	const unCheckedIcon_slot_template = /*#slots*/ ctx[35].unCheckedIcon;
	const unCheckedIcon_slot = create_slot(unCheckedIcon_slot_template, ctx, /*$$scope*/ ctx[34], get_unCheckedIcon_slot_context);
	const unCheckedIcon_slot_or_fallback = unCheckedIcon_slot || fallback_block(ctx);

	return {
		c() {
			div4 = element("div");
			div2 = element("div");
			div0 = element("div");
			if (checkedIcon_slot_or_fallback) checkedIcon_slot_or_fallback.c();
			t0 = space();
			div1 = element("div");
			if (unCheckedIcon_slot_or_fallback) unCheckedIcon_slot_or_fallback.c();
			t1 = space();
			div3 = element("div");
			t2 = space();
			input = element("input");
			attr(div0, "style", /*checkedIconStyle*/ ctx[5]);
			attr(div1, "style", /*uncheckedIconStyle*/ ctx[6]);
			attr(div2, "class", "react-switch-bg");
			attr(div2, "style", /*backgroundStyle*/ ctx[4]);
			attr(div2, "onmousedown", func);
			attr(div3, "class", "react-switch-handle");
			attr(div3, "style", /*handleStyle*/ ctx[7]);
			attr(input, "type", "checkbox");
			attr(input, "role", "switch");
			input.disabled = /*disabled*/ ctx[0];
			attr(input, "style", /*inputStyle*/ ctx[8]);
			attr(div4, "class", /*containerClass*/ ctx[1]);
			attr(div4, "style", /*rootStyle*/ ctx[3]);
		},
		m(target, anchor) {
			insert(target, div4, anchor);
			append(div4, div2);
			append(div2, div0);

			if (checkedIcon_slot_or_fallback) {
				checkedIcon_slot_or_fallback.m(div0, null);
			}

			append(div2, t0);
			append(div2, div1);

			if (unCheckedIcon_slot_or_fallback) {
				unCheckedIcon_slot_or_fallback.m(div1, null);
			}

			append(div4, t1);
			append(div4, div3);
			append(div4, t2);
			append(div4, input);
			/*input_binding*/ ctx[36](input);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div2, "click", function () {
						if (is_function(/*disabled*/ ctx[0] ? null : /*onClick*/ ctx[17])) (/*disabled*/ ctx[0] ? null : /*onClick*/ ctx[17]).apply(this, arguments);
					}),
					listen(div3, "click", click_handler),
					listen(div3, "mousedown", function () {
						if (is_function(/*disabled*/ ctx[0] ? null : /*onMouseDown*/ ctx[9])) (/*disabled*/ ctx[0] ? null : /*onMouseDown*/ ctx[9]).apply(this, arguments);
					}),
					listen(div3, "touchstart", function () {
						if (is_function(/*disabled*/ ctx[0] ? null : /*onTouchStart*/ ctx[10])) (/*disabled*/ ctx[0] ? null : /*onTouchStart*/ ctx[10]).apply(this, arguments);
					}),
					listen(div3, "touchmove", function () {
						if (is_function(/*disabled*/ ctx[0] ? null : /*onTouchMove*/ ctx[11])) (/*disabled*/ ctx[0] ? null : /*onTouchMove*/ ctx[11]).apply(this, arguments);
					}),
					listen(div3, "touchend", function () {
						if (is_function(/*disabled*/ ctx[0] ? null : /*onTouchEnd*/ ctx[12])) (/*disabled*/ ctx[0] ? null : /*onTouchEnd*/ ctx[12]).apply(this, arguments);
					}),
					listen(div3, "touchcancel", function () {
						if (is_function(/*disabled*/ ctx[0] ? null : /*unsetHasOutline*/ ctx[16])) (/*disabled*/ ctx[0] ? null : /*unsetHasOutline*/ ctx[16]).apply(this, arguments);
					}),
					listen(input, "focus", /*setHasOutline*/ ctx[15]),
					listen(input, "blur", /*unsetHasOutline*/ ctx[16]),
					listen(input, "keyup", /*onKeyUp*/ ctx[14]),
					listen(input, "change", /*onInputChange*/ ctx[13])
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (checkedIcon_slot) {
				if (checkedIcon_slot.p && dirty[1] & /*$$scope*/ 8) {
					update_slot(checkedIcon_slot, checkedIcon_slot_template, ctx, /*$$scope*/ ctx[34], dirty, get_checkedIcon_slot_changes, get_checkedIcon_slot_context);
				}
			}

			if (!current || dirty[0] & /*checkedIconStyle*/ 32) {
				attr(div0, "style", /*checkedIconStyle*/ ctx[5]);
			}

			if (unCheckedIcon_slot) {
				if (unCheckedIcon_slot.p && dirty[1] & /*$$scope*/ 8) {
					update_slot(unCheckedIcon_slot, unCheckedIcon_slot_template, ctx, /*$$scope*/ ctx[34], dirty, get_unCheckedIcon_slot_changes, get_unCheckedIcon_slot_context);
				}
			}

			if (!current || dirty[0] & /*uncheckedIconStyle*/ 64) {
				attr(div1, "style", /*uncheckedIconStyle*/ ctx[6]);
			}

			if (!current || dirty[0] & /*backgroundStyle*/ 16) {
				attr(div2, "style", /*backgroundStyle*/ ctx[4]);
			}

			if (!current || dirty[0] & /*handleStyle*/ 128) {
				attr(div3, "style", /*handleStyle*/ ctx[7]);
			}

			if (!current || dirty[0] & /*disabled*/ 1) {
				input.disabled = /*disabled*/ ctx[0];
			}

			if (!current || dirty[0] & /*inputStyle*/ 256) {
				attr(input, "style", /*inputStyle*/ ctx[8]);
			}

			if (!current || dirty[0] & /*containerClass*/ 2) {
				attr(div4, "class", /*containerClass*/ ctx[1]);
			}

			if (!current || dirty[0] & /*rootStyle*/ 8) {
				attr(div4, "style", /*rootStyle*/ ctx[3]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(checkedIcon_slot_or_fallback, local);
			transition_in(unCheckedIcon_slot_or_fallback, local);
			current = true;
		},
		o(local) {
			transition_out(checkedIcon_slot_or_fallback, local);
			transition_out(unCheckedIcon_slot_or_fallback, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div4);
			if (checkedIcon_slot_or_fallback) checkedIcon_slot_or_fallback.d(detaching);
			if (unCheckedIcon_slot_or_fallback) unCheckedIcon_slot_or_fallback.d(detaching);
			/*input_binding*/ ctx[36](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

const func = e => e.preventDefault();
const click_handler = e => e.preventDefault();

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { checked } = $$props;
	let { disabled = false } = $$props;
	let { offColor = "#888" } = $$props;
	let { onColor = "#080" } = $$props;
	let { offHandleColor = "#fff" } = $$props;
	let { onHandleColor = "#fff" } = $$props;
	let { handleDiameter } = $$props;
	let { unCheckedIcon = UncheckedIcon } = $$props;
	let { checkedIcon = CheckedIcon } = $$props;
	let { boxShadow = null } = $$props;
	let { activeBoxShadow = "0 0 2px 3px #3bf" } = $$props;
	let { height = 28 } = $$props;
	let { width = 56 } = $$props;
	let { id = "" } = $$props;
	let { containerClass = "" } = $$props;
	const dispatch = createEventDispatcher();

	//state
	let state = {
		handleDiameter: 0,
		checkedPos: 0,
		uncheckedPos: 0,
		pos: 0,
		lastDragAt: 0,
		lastKeyUpAt: 0,
		startX: null,
		hasOutline: null,
		dragStartingTime: null,
		checkedStateFromDragging: false
	};

	let inputRef = null;
	state.handleDiameter = handleDiameter || height - 2;
	state.checkedPos = Math.max(width - height, width - (height + state.handleDiameter) / 2);
	state.uncheckedPos = Math.max(0, (height - state.handleDiameter) / 2);
	state.pos = checked ? state.checkedPos : state.uncheckedPos;
	state.lastDragAt = 0;
	state.lastKeyUpAt = 0;

	//event handlers
	function onDragStart(clientX) {
		inputRef && inputRef.focus && inputRef.focus();
		$$invalidate(33, state.startX = clientX, state);
		$$invalidate(33, state.hasOutline = true, state);
		$$invalidate(33, state.dragStartingTime = Date.now(), state);
	}

	function onDrag(clientX) {
		let { startX, isDragging, pos } = state;
		const startPos = checked ? state.checkedPos : state.uncheckedPos;
		const mousePos = startPos + clientX - startX;

		// We need this check to fix a windows glitch where onDrag is triggered onMouseDown in some cases
		if (!isDragging && clientX !== startX) {
			$$invalidate(33, state.isDragging = true, state);
		}

		const newPos = Math.min(state.checkedPos, Math.max(state.uncheckedPos, mousePos));

		// Prevent unnecessary rerenders
		if (newPos !== pos) {
			$$invalidate(33, state.pos = newPos, state);
		}
	}

	function onDragStop(event) {
		let { pos, isDragging, dragStartingTime } = state;
		const halfwayCheckpoint = (state.checkedPos + state.uncheckedPos) / 2;

		// Simulate clicking the handle
		const timeSinceStart = Date.now() - dragStartingTime;

		if (!isDragging || timeSinceStart < 250) {
			onChangeTrigger(event);
		} else if (checked) {
			if (pos > halfwayCheckpoint) {
				$$invalidate(33, state.pos = state.checkedPos, state); // Handle dragging from checked position
			} else {
				onChangeTrigger(event);
			}
		} else if (pos < halfwayCheckpoint) {
			$$invalidate(33, state.pos = state.uncheckedPos, state); // Handle dragging from unchecked position
		} else {
			onChangeTrigger(event);
		}

		$$invalidate(33, state.isDragging = false, state);
		$$invalidate(33, state.hasOutline = false, state);
		$$invalidate(33, state.lastDragAt = Date.now(), state);
	}

	function onMouseDown(event) {
		event.preventDefault();

		// Ignore right click and scroll
		if (typeof event.button === "number" && event.button !== 0) {
			return;
		}

		onDragStart(event.clientX);
		window.addEventListener("mousemove", onMouseMove);
		window.addEventListener("mouseup", onMouseUp);
	}

	function onMouseMove(event) {
		event.preventDefault();
		onDrag(event.clientX);
	}

	function onMouseUp(event) {
		onDragStop(event);
		window.removeEventListener("mousemove", onMouseMove);
		window.removeEventListener("mouseup", onMouseUp);
	}

	function onTouchStart(event) {
		$$invalidate(33, state.checkedStateFromDragging = null, state);
		onDragStart(event.touches[0].clientX);
	}

	function onTouchMove(event) {
		onDrag(event.touches[0].clientX);
	}

	function onTouchEnd(event) {
		event.preventDefault();
		onDragStop(event);
	}

	function onInputChange(event) {
		// This condition is unfortunately needed in some browsers where the input's change event might get triggered
		// right after the dragstop event is triggered (occurs when dropping over a label element)
		if (Date.now() - state.lastDragAt > 50) {
			onChangeTrigger(event);

			// Prevent clicking label, but not key activation from setting outline to true - yes, this is absurd
			if (Date.now() - state.lastKeyUpAt > 50) {
				$$invalidate(33, state.hasOutline = false, state);
			}
		}
	}

	function onKeyUp() {
		$$invalidate(33, state.lastKeyUpAt = Date.now(), state);
	}

	function setHasOutline() {
		$$invalidate(33, state.hasOutline = true, state);
	}

	function unsetHasOutline() {
		$$invalidate(33, state.hasOutline = false, state);
	}

	function onClick(event) {
		event.preventDefault();
		inputRef.focus();
		onChangeTrigger(event);
		$$invalidate(33, state.hasOutline = false, state);
	}

	function onChangeTrigger(event) {
		$$invalidate(20, checked = !checked);
		dispatch("change", { checked, event, id });
	}

	//Hack since components should always to starting with Capital letter and props are camelCasing
	let CIcon = checkedIcon;

	let UIcon = unCheckedIcon;

	//styles
	let rootStyle = "";

	let backgroundStyle = "";
	let checkedIconStyle = "";
	let uncheckedIconStyle = "";
	let handleStyle = "";
	let inputStyle = "";

	function input_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			inputRef = $$value;
			$$invalidate(2, inputRef);
		});
	}

	$$self.$$set = $$props => {
		if ("checked" in $$props) $$invalidate(20, checked = $$props.checked);
		if ("disabled" in $$props) $$invalidate(0, disabled = $$props.disabled);
		if ("offColor" in $$props) $$invalidate(21, offColor = $$props.offColor);
		if ("onColor" in $$props) $$invalidate(22, onColor = $$props.onColor);
		if ("offHandleColor" in $$props) $$invalidate(23, offHandleColor = $$props.offHandleColor);
		if ("onHandleColor" in $$props) $$invalidate(24, onHandleColor = $$props.onHandleColor);
		if ("handleDiameter" in $$props) $$invalidate(25, handleDiameter = $$props.handleDiameter);
		if ("unCheckedIcon" in $$props) $$invalidate(26, unCheckedIcon = $$props.unCheckedIcon);
		if ("checkedIcon" in $$props) $$invalidate(27, checkedIcon = $$props.checkedIcon);
		if ("boxShadow" in $$props) $$invalidate(28, boxShadow = $$props.boxShadow);
		if ("activeBoxShadow" in $$props) $$invalidate(29, activeBoxShadow = $$props.activeBoxShadow);
		if ("height" in $$props) $$invalidate(30, height = $$props.height);
		if ("width" in $$props) $$invalidate(31, width = $$props.width);
		if ("id" in $$props) $$invalidate(32, id = $$props.id);
		if ("containerClass" in $$props) $$invalidate(1, containerClass = $$props.containerClass);
		if ("$$scope" in $$props) $$invalidate(34, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*checked*/ 1048576 | $$self.$$.dirty[1] & /*state*/ 4) {
			 if (!state.isDragging) {
				$$invalidate(33, state.pos = checked ? state.checkedPos : state.uncheckedPos, state);
			}
		}

		if ($$self.$$.dirty[0] & /*disabled, height*/ 1073741825) {
			 $$invalidate(3, rootStyle = `
    position: relative;
    display: inline-block;
    text-align: left;
    opacity: ${disabled ? 0.5 : 1};
    direction: ltr;
    border-radius: ${height / 2}px;
    transition: opacity 0.25s;
    touch-action: none;
    webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    user-select: none;
  `);
		}

		if ($$self.$$.dirty[0] & /*height, offColor, onColor, disabled*/ 1080033281 | $$self.$$.dirty[1] & /*width, state*/ 5) {
			 $$invalidate(4, backgroundStyle = `
    height: ${height}px;
    width: ${width}px;
    margin: ${Math.max(0, (state.handleDiameter - height) / 2)}px;
    position: relative;
    background: ${getBackgroundColor(state.pos, state.checkedPos, state.uncheckedPos, offColor, onColor)};
    border-radius: ${height / 2}px;
    cursor: ${disabled ? "default" : "pointer"};
    transition: ${state.isDragging ? null : "background 0.25s"};
  `);
		}

		if ($$self.$$.dirty[0] & /*height*/ 1073741824 | $$self.$$.dirty[1] & /*width, state*/ 5) {
			 $$invalidate(5, checkedIconStyle = `
    height: ${height}px;
    width: ${Math.min(height * 1.5, width - (state.handleDiameter + height) / 2 + 1)}px;
    position: relative;
    opacity:
      ${(state.pos - state.uncheckedPos) / (state.checkedPos - state.uncheckedPos)};
    pointer-events: none;
    transition: ${state.isDragging ? null : "opacity 0.25s"};
  `);
		}

		if ($$self.$$.dirty[0] & /*height*/ 1073741824 | $$self.$$.dirty[1] & /*width, state*/ 5) {
			 $$invalidate(6, uncheckedIconStyle = `
    height: ${height}px;
    width: ${Math.min(height * 1.5, width - (state.handleDiameter + height) / 2 + 1)}px;
    position: absolute;
    opacity:
      ${1 - (state.pos - state.uncheckedPos) / (state.checkedPos - state.uncheckedPos)};
    right: 0px;
    top: 0px;
    pointer-events: none;
    transition: ${state.isDragging ? null : "opacity 0.25s"};
  `);
		}

		if ($$self.$$.dirty[0] & /*offHandleColor, onHandleColor, disabled, height, activeBoxShadow, boxShadow*/ 1904214017 | $$self.$$.dirty[1] & /*state*/ 4) {
			 $$invalidate(7, handleStyle = `
    height: ${state.handleDiameter}px;
    width: ${state.handleDiameter}px;
    background: ${getBackgroundColor(state.pos, state.checkedPos, state.uncheckedPos, offHandleColor, onHandleColor)};
    display: inline-block;
    cursor: ${disabled ? "default" : "pointer"};
    border-radius: 50%;
    position: absolute;
    transform: translateX(${state.pos}px);
    top: ${Math.max(0, (height - state.handleDiameter) / 2)}px;
    outline: 0;
    box-shadow: ${state.hasOutline ? activeBoxShadow : boxShadow};
    border: 0;
    transition: ${state.isDragging
			? null
			: "background-color 0.25s, transform 0.25s, box-shadow 0.15s"};
  `);
		}
	};

	 $$invalidate(8, inputStyle = `
    border: 0px;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0px;
    position: absolute;
    width: 1px;
  `);

	return [
		disabled,
		containerClass,
		inputRef,
		rootStyle,
		backgroundStyle,
		checkedIconStyle,
		uncheckedIconStyle,
		handleStyle,
		inputStyle,
		onMouseDown,
		onTouchStart,
		onTouchMove,
		onTouchEnd,
		onInputChange,
		onKeyUp,
		setHasOutline,
		unsetHasOutline,
		onClick,
		CIcon,
		UIcon,
		checked,
		offColor,
		onColor,
		offHandleColor,
		onHandleColor,
		handleDiameter,
		unCheckedIcon,
		checkedIcon,
		boxShadow,
		activeBoxShadow,
		height,
		width,
		id,
		state,
		$$scope,
		slots,
		input_binding
	];
}

class Switch extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment$2,
			safe_not_equal,
			{
				checked: 20,
				disabled: 0,
				offColor: 21,
				onColor: 22,
				offHandleColor: 23,
				onHandleColor: 24,
				handleDiameter: 25,
				unCheckedIcon: 26,
				checkedIcon: 27,
				boxShadow: 28,
				activeBoxShadow: 29,
				height: 30,
				width: 31,
				id: 32,
				containerClass: 1
			},
			[-1, -1]
		);
	}
}

export default Switch;
